{"version":3,"sources":["logo.svg","App.js","views/form/Comp1.js","reportWebVitals.js","index.js"],"names":["App","Comp1","useState","name","setName","last","setLast","personas","setPersonas","selected","idpersona","nombre","apellido","getPersonas","a","axios","get","response","status","data","persona","console","log","error","put","grupo","then","alert","useEffect","options","filterType","onlyOneRowCanBeSelected","onRowClick","rowData","rowMeta","_id","type","placeholder","onChange","event","target","value","onClick","post","catch","putPersonas","title","columns","field","filter","sort","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAAe,I,cCWAA,I,oEC0MAC,EAjND,WACV,MAAsBC,mBAAS,IAA/B,mBAAMC,EAAN,KAAWC,EAAX,KACA,EAAsBF,mBAAS,IAA/B,mBAAMG,EAAN,KAAWC,EAAX,KAEA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEIC,EAAW,CACXC,UAAW,GACXC,OAAQ,GACRC,SAAU,IATC,SAsDAC,IAtDA,2EAsDf,4BAAAC,EAAA,+EAE6BC,IAAMC,IAAI,mDAFvC,OAI2B,OAFfC,EAFZ,QAIkBC,SACVV,EAAYS,EAASE,KAAKC,SAC1BC,QAAQC,IAAIL,EAASE,OAN7B,gDASME,QAAQE,MAAR,MATN,0DAtDe,kEAmEf,WAA2Bd,GAA3B,SAAAK,EAAA,sDACI,GAAY,KAATX,GAAwB,KAATE,EAClB,IACIU,IAAMS,IAAI,2CAA2Cf,EAASC,UAAW,CACrEC,OAAQR,EACRS,SAAUP,EACVoB,MAAO,IAGVC,MAAK,SAAST,GACY,MAApBA,EAASC,SACRL,IACAc,MAAM,mBAOjB,MAAMJ,GACHF,QAAQE,MAAMA,QAEbI,MAAM,0BAtBf,2CAnEe,wBAgDfC,qBAAU,WAENf,MAEF,IAsEF,IAmBSM,EAAOZ,EAoBPsB,EAAU,CACfC,WAAY,WACZC,yBAAwB,EACxBC,WArBsB,SAACC,EAASC,GAKhCzB,EAAW,CACPC,UAAWuB,EAAQE,IACnBxB,OAAQsB,EAAQtB,OAChBC,SAAUqB,EAAQrB,YAoB1B,OACI,eAAC,WAAD,WACI,0CACA,gCACI,8BACI,uBAAOwB,KAAK,OAAOC,YAAc,SAASlC,KAAK,OAAOmC,SArKxC,SAACC,GAG3BnC,EAAQmC,EAAMC,OAAOC,YAoKb,8BACI,uBAAOL,KAAK,OAAOC,YAAc,WAAWlC,KAAK,OAAOmC,SAnK1C,SAACC,GAG3BjC,EAAQiC,EAAMC,OAAOC,YAoKb,wBAAQC,QA5JH,WAoED,KAATvC,GAAwB,KAATE,EAClBU,IAAM4B,KAAK,0CAA2C,CAClDhC,OAAQR,EACRS,SAAUP,EACVoB,MAAM,IAEPC,MAAK,SAAUT,GAEO,MAAlBA,EAASC,QACRS,MAAM,qBACNd,IACAQ,QAAQC,IAAIL,IAEZU,MAAM,uBAKXiB,OAAM,SAAUrB,GACfF,QAAQC,IAAIC,MAEXI,MAAM,2BAmEH,kBACA,wBAAQe,QAlKD,YAtBJ,oCAwBXG,CAAYpC,IAgKJ,uBAWJ,cAAC,IAAD,CACVqC,MAAO,WACP3B,KAAMA,EACN4B,QA5EkB,CACZ,CACC5C,KAAM,SACN6C,MAAO,SACPnB,QAAS,CACRoB,QAAQ,EACRC,MAAM,IAGR,CACC/C,KAAM,WACN6C,MAAO,WACPnB,QAAS,CACRoB,QAAQ,EACRC,MAAM,KA+DdrB,QAASA,QC/LIsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9bc5c189.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>OMEGALUL</h1>\n    </div>\n  );\n}\n\nexport default App;\n","import React,{Fragment,useEffect,useState} from 'react'\r\nimport axios from 'axios'\r\nimport MaterialDatatable from \"material-datatable\";\r\n\r\nconst Comp1 = () =>{\r\n    const[name,setName] = useState(\"\")\r\n    const[last,setLast] = useState(\"\")\r\n\r\n    const [personas, setPersonas] = useState([])\r\n\r\n    let selected = {\r\n        idpersona: \"\",\r\n        nombre: \"\",\r\n        apellido: \"\"}\r\n\r\n    const handleInputChangeName = (event) =>\r\n    {\r\n        //console.log(event)\r\n        setName(event.target.value)\r\n    }\r\n    const handleInputChangeLast = (event) =>\r\n    {\r\n        //console.log(event)\r\n        setLast(event.target.value)\r\n    }\r\n\r\n    const updateData = ()=>{\r\n        //console.log(\"Enviando datos nombre: \"+name+\" apellido: \"+last)\r\n        putPersonas(selected)\r\n    }\r\n\r\n    const sendData = ()=>{\r\n        //console.log(\"Enviando datos nombre: \"+name+\" apellido: \"+last)\r\n\r\n        guardarPersona()\r\n        //putPersonas(selected)\r\n\r\n        //agregado para crear lista\r\n        /*\r\n        let nuevo = {\r\n            nombre: name,\r\n            apellido: last,\r\n            \r\n        }\r\n\r\n        setPersonas(personas => [...personas, nuevo])\r\n        setName(\"\")\r\n        setLast(\"\")\r\n        */\r\n        \r\n    }\r\n\r\n    useEffect(()=>{\r\n\r\n        getPersonas()\r\n\r\n    },[])\r\n\r\n    async function getPersonas() {\r\n        try {\r\n          const response = await axios.get('http://192.99.144.232:5000/api/personas?grupo=9');\r\n\r\n          if(response.status===200){\r\n            setPersonas(response.data.persona)\r\n            console.log(response.data);}\r\n\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n    }\r\n\r\n    async function putPersonas(selected) {\r\n        if(name !== \"\" && last !== \"\")\r\n        try {\r\n            axios.put('http://192.99.144.232:5000/api/personas/'+selected.idpersona, {\r\n                nombre: name,\r\n                apellido: last,\r\n                grupo: 9\r\n                \r\n            })\r\n            .then(function(response){\r\n                if(response.status === 200){\r\n                    getPersonas();\r\n                    alert('put success')\r\n                    }\r\n            });\r\n\r\n            \r\n            //response.data.json; // { hello: 'world' }\r\n\r\n        }catch(error) {\r\n            console.error(error);\r\n        }\r\n        else{alert(\"no dejar campos vacios\")}\r\n\r\n    }\r\n\r\n    function guardarPersona()\r\n    {\r\n        if(name !== \"\" && last !== \"\")\r\n        axios.post('http://192.99.144.232:5000/api/personas', {\r\n            nombre: name,\r\n            apellido: last,\r\n            grupo:9\r\n          })\r\n          .then(function (response) {\r\n\r\n            if(response.status===200){\r\n                alert(\"registro correcto\")\r\n                getPersonas()\r\n                console.log(response);\r\n            }else{\r\n                alert(\"error al guardar\")\r\n\r\n            }\r\n            \r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n        else{alert(\"no dejar campos vacios\")}\r\n\r\n    }\r\n    \r\n    //desde aqui mdt\r\n\r\n    const columns = [\r\n        {\r\n         name: \"Nombre\",\r\n         field: \"nombre\",\r\n         options: {\r\n          filter: true,\r\n          sort: true,\r\n         }\r\n        },\r\n        {\r\n         name: \"Apellido\",\r\n         field: \"apellido\",\r\n         options: {\r\n          filter: true,\r\n          sort: false,\r\n         }\r\n        }\r\n       ];\r\n        \r\n       const data = personas;\r\n      \r\n       const handleRowClick = (rowData, rowMeta) => {\r\n        \r\n        \r\n\r\n\r\n        selected = {\r\n            idpersona: rowData._id,\r\n            nombre: rowData.nombre,\r\n            apellido: rowData.apellido\r\n\r\n        }\r\n        /*\r\n        console.log(rowData.name)\r\n        console.log(rowData.nombre)\r\n        console.log(rowData.apellido)\r\n        console.log(rowData._id)\r\n        */\r\n    };\r\n       const options = {\r\n        filterType: 'checkbox',\r\n        onlyOneRowCanBeSelected:true,\r\n        onRowClick: handleRowClick\r\n       };\r\n      \r\n\r\n\r\n\r\n\r\n    return(\r\n        <Fragment>\r\n            <h1>Taller 2</h1>\r\n            <div>\r\n                <div>\r\n                    <input type=\"text\" placeholder = \"nombre\" name=\"name\" onChange={handleInputChangeName}></input>\r\n                </div>\r\n                <div>\r\n                    <input type=\"text\" placeholder = \"apellido\" name=\"last\" onChange={handleInputChangeLast}></input>\r\n                </div>\r\n\r\n\r\n                <button onClick={sendData}>SEND</button>\r\n                <button onClick={updateData}>UPDATE</button>\r\n\r\n        \r\n                {/*<div className=\"users\">\r\n                    {personas.map((personas) => (\r\n                 \r\n                          <li>{personas.nombre} {personas.apellido}</li>\r\n                    ))}\r\n                </div>\r\n                        */}\r\n            </div>\r\n            <MaterialDatatable\r\n  title={\"Personas\"}\r\n  data={data}\r\n  columns={columns}\r\n  options={options}\r\n/>\r\n            \r\n                    \r\n        </Fragment>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Comp1","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Comp1 from './views/form/Comp1.js';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Comp1 />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}